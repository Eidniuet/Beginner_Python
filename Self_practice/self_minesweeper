import random
import re

# Creating a board object to represent the minesweeper board
# This is so that when we code up the game, we can just say "create a new board object"
# and dig on that board, etc.
class Board:
    def __init__ (self, dim_size, num_bombs):
        # keep track of these parameters because we might find them helpful later on
        self.dim_size = dim_size
        self.num_bombs = num_bombs

        # get the board
        self.board = self.make_new_board()
        self.assign_values_to_board()

        # initialize a set to keep track of which locations we've uncovered
        # we will put (row,col) tuples into these sets 
        self.dug = set()

    def make_new_board(self):
        # construct a new board based on the dim size and num bombs
        board = [[None for _ in range(self.dim_size)] for _ in range(self.dim_size)]
        num_bomb_planted = 0
        while num_bomb_planted < self.num_bombs:
            loc = random.randint(0, (self.dim_size)**2+-1)
            row = loc // self.dim_size
            col = loc % self.dim_size
            
            if board[row][col] == '*':
                continue

            board[row][col] = '*'
            num_bomb_planted +=1

        return board


    def assign_values_to_board(self):
        for r in range(self.dim_size):
            for c in range(self.dim_size):
                if self.board[r][c] == "*":
                    continue
                self.board[r][c]= self.get_num_neighboring_bombs(r, c)
        pass

    def get_num_neighboring_bombs(self, row, col):
        num_neighboring_bomb= 0
        for r in range (max(0,row-1) , min(self.dim_size-1, row+1)+1): # run through all 9 numb 
            for c in range(max(0,col-1), min(self.dim_size-1, col+1)+1): 
                if r == row and c == col: # ignore middle one
                    continue
                if self.board[r][c]=='*':  # find bomb + 1
                    num_neighboring_bomb+= 1
        return num_neighboring_bomb

       

    def dig(self, row, col):
        # dig at that location!
        self.dug.add((row,col))
        # return True if successful dig, False if bomb dug
        if self.board[row][col] == '*':
            return False
        elif self.board[row][col] > 0: 
            return True # stop the recursively dig
        
        # a couple of scenarios to consider:
        # hit a bomb -> game over
        # dig at a location with neighboring bombs -> finish dig
        # dig at a location with no neighboring bombs -> recursively dig neighbors!
        for r in range (max(0,row-1) , min(self.dim_size-1, row+1)+1): # run through all 9 numb 
            for c in range(max(0,col-1), min(self.dim_size-1, col+1)+1):
                if (r,c) in self.dug:
                    continue
                self.dig(r,c) # recursively dig neighbors > until get number
        return True
        

    def __str__(self):
        visible_board = [[None for _ in range(self.dim_size)] for _ in range(self.dim_size)]
        for row in range(self.dim_size):
            for col in range(self.dim_size):
                if (row,col) in self.dug:
                    visible_board[row][col] = str(self.board[row][col])
                else:
                    visible_board[row][col] = ' '
        
        # put this together in a string
        string_rep = ''
        # get max column widths for printing
        widths = []
        for idx in range(self.dim_size):
            columns = map(lambda x: x[idx], visible_board)
            widths.append(
                len(
                    max(columns, key = len)
                )
            )

        # print the csv strings
        indices = [i for i in range(self.dim_size)]
        indices_row = '   '
        cells = []
        for idx, col in enumerate(indices):
            format = '%-' + str(widths[idx]) + "s"
            cells.append(format % (col))
        indices_row += '  '.join(cells)
        indices_row += '  \n'
        
        for i in range(len(visible_board)):
            row = visible_board[i]
            string_rep += f'{i} |'
            cells = []
            for idx, col in enumerate(row):
                format = '%-' + str(widths[idx]) + "s"
                cells.append(format % (col))
            string_rep += ' |'.join(cells)
            string_rep += ' |\n'

        str_len = int(len(string_rep) / self.dim_size)
        string_rep = indices_row + '-'*str_len + '\n' + string_rep + '-'*str_len

        return string_rep

def play(dim_size=10, num_bombs=10):
    # Step 1: create the board and plant the bombs
    board =Board(dim_size, num_bombs)
    # Step 2: show the user the board and ask for where they want to dig
    safe = True
    # Step 3a: if the location is a bomb, then show game over message
    while len(board.dug) < board.dim_size**2 - num_bombs:
        print(board)
        userinput = re.split(',(\\s)*', input("Where would you like to dig? Input as row,col: "))
        row , col = int(userinput[0]), int(userinput[-1])
        if row < 0 or row >= board.dim_size or col < 0 or col >= dim_size:
            print("Invalid location. Try again.")
            continue
        safe= board.dig(row, col)
    
        if not safe:
            break

    if safe:
        print("CONGRATULATIONS!!!! YOU ARE VICTORIOUS!")
        board.dug = [(r,c) for r in range(board.dim_size) for c in range(board.dim_size)]
        print(board)
    else:
        print("SORRY GAME OVER :(")
        board.dug = [(r,c) for r in range(board.dim_size) for c in range(board.dim_size)]
        print(board)

if __name__=='__main__':
    play()